package Game_World;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import Graphics_Renderer.GraphicsRenderer;
import Object_Interfaces.GameObject;

public class ExternalDoor implements GameObject {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	private Rectangle boundingBox;// this is where the door appears
	private String endLocationName;
	private Point endLocationPoint;// point in x-y where the avatar will
	//private Location endLocation;								// materialise
	private int direction;
	private boolean locked = false;
	private int key;
	//private GameWorld world;
	transient Image image = null;

	// A door is a unidirectional object that moves an avatar obj from
	// the contents of one location object to the contents of another location
	// object
	public ExternalDoor() {
	}

	public ExternalDoor(Point currentPoint, int dir, GameWorld world,
			String endLocationName, Point endLocationPoint) {
		this.endLocationName = endLocationName;
		this.boundingBox = new Rectangle(currentPoint.x, currentPoint.y, 60, 60);
		this.endLocationPoint = endLocationPoint;
		this.direction = dir;
		//this.world = world;
	}

	// Moving through a door removes an Avatar from a location and puts it in
	// another location.
//	public void moveThroughDoor(Avatar a) {
//		if (!locked && avatarIsClose(a)) {// if the door is not locked and the
//											// Avatar is about 1cm from the
//											// door.
//			GameWorld avatarWorld = a.getWorld();
//			Location avatarLocation = a.getWorld().getAvatarLocations().get(a);
//			avatarWorld.getAvatarLocations().remove(a);
//			avatarWorld.getAvatarLocations().put(a,avatarWorld.getLocations().get(endLocationName));
//
//			// move the Avatar from the old location's contents to the new location's contents.
//			avatarLocation.getAllObjects().remove(a);
//			avatarWorld.getLocations().get(endLocationName).getAllObjects().add(a);
//			//a.setCurrentLocation(world.getLocations().get(endLocationName));
//			a.setCurrentLocation(endLocation);
//			a.setLocationName(endLocationName);
//			// Reset Avatar's boundingbox to a a point in the new location
//			Rectangle r = a.getBoundingBox();
//			r.setLocation(endLocationPoint);
//			a.setLocationName(endLocationName);
//			System.out.println(a.getLocationName());
//			a.setBoundingBox(r);
//			a.setDirection(direction);
//		}
//	}

	// makes sure that the avatar is 'close' to the door (default is 100 pixels
	// atm)
	public boolean avatarIsClose(Avatar a) {
		if (Math.abs((a.getBoundingBox().getCenterX() - boundingBox
				.getCenterX())) < 100
				&& Math.abs((a.getBoundingBox().getCenterY() - boundingBox
						.getCenterY())) < 100) {
			return true;
		}
		return false;
	}

	// avatar should use this method to unlock this door
	public void unlockDoor(Avatar a, int k) {
		if (k == key && avatarIsClose(a)) {
			locked = false;
		}
	}

	public Rectangle getBoundingBox() {
		return boundingBox;
	}

	public void setBoundingBox(Rectangle boundingBox) {
		this.boundingBox = boundingBox;
	}

	public String getEndLocation() {
		return endLocationName;
	}

	public void setEndLocation(String endLocation) {
		this.endLocationName = endLocation;
	}

	public Point getPlaceInEndLocation() {
		return endLocationPoint;
	}

	public void setPlaceInEndLocation(Point placeInEndLocation) {
		this.endLocationPoint = placeInEndLocation;
	}

	public int getDirection() {
		return direction;
	}

	public void setDirection(int direction) {
		this.direction = direction;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public void draw(Graphics g) {
		String image;
		if (direction % 4 == 0)
			image = "Door-south";
		else if (direction % 4 == 1)
			image = "Door-west";
		else if (direction % 4 == 2)
			image = "Door-north";
		else
			image = "Door-east";

		g.drawImage(GraphicsRenderer.getImage(image), boundingBox.x,
				boundingBox.y, null);

	}

	@Override
	public int compareTo(GameObject other) {
		return boundingBox.y-other.getRect().y;
	}

	@Override
	public Image toIcon() {
		try {
			return ImageIO.read(
					new File("Images/Objects/door-" + direction + ".png"))
					.getScaledInstance(34, 34, Image.SCALE_DEFAULT);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public boolean containsPoint(Point p) {
		return boundingBox.contains(p);
	}

	@Override
	public boolean isOverlapping(Rectangle rect) {
		return false;
	}

	@Override
	public String getName() {
		return "Door to " + endLocationName;
	}

	@Override
	public Rectangle getRect() {
		return boundingBox;
	}

	public String getLocationOne() {
		return endLocationName;
	}

	public void setLocationOne(String locationFrom) {
		this.endLocationName = locationFrom;
	}

	public Point getPlaceWhereAvatarExits() {
		return endLocationPoint;
	}

	public void setPlaceWhereAvatarExits(Point placeWhereAvatarExits) {
		this.endLocationPoint = placeWhereAvatarExits;
	}

	public boolean isLocked() {
		return locked;
	}

	public void setLocked(boolean locked) {
		this.locked = locked;
	}

	public int getKey() {
		return key;
	}

	public void setKey(int key) {
		this.key = key;
	}

	public Image getImage() {
		return image;
	}

	public void setImage(Image image) {
		this.image = image;
	}

	public String getEndLocationName() {
		return endLocationName;
	}

	public void setEndLocationName(String endLocationName) {
		this.endLocationName = endLocationName;
	}

	public Point getEndLocationPoint() {
		return endLocationPoint;
	}

	@Override
	public boolean setRect(Rectangle r) {
		this.boundingBox = r;
		return true;
	}

//	public void setEndLocationPoint(Point endLocationPoint) {
//		this.endLocationPoint = endLocationPoint;
//	}
//
//	public void setEndLocation(Location endLocation) {
//		this.endLocation = endLocation;
//	}

//	public GameWorld getWorld() {
//		return world;
//	}
//
//	public void setWorld(GameWorld world) {
//		this.world = world;
//	}



}
